#!/usr/bin/env python3
"""
Script dedicado para avaliar o impacto do Chain of Verification (CoV)
Executa testes focados nas √°reas onde CoV deve mostrar maior benef√≠cio
"""

import json
import time
import sys
from tests.automated_test_runner import AutomatedTestRunner

def main():
    """Executa avalia√ß√£o focada do CoV"""
    
    print("üî¨ AVALIA√á√ÉO ESPEC√çFICA DO CHAIN OF VERIFICATION (CoV)")
    print("=" * 60)
    print("Este script avalia especificamente o impacto do CoV em:")
    print("‚Ä¢ Cen√°rios complexos e amb√≠guos")
    print("‚Ä¢ Interpreta√ß√£o de contexto")
    print("‚Ä¢ Recupera√ß√£o de erros")
    print("‚Ä¢ Verifica√ß√£o de consist√™ncia")
    print("‚Ä¢ Detec√ß√£o de problemas l√≥gicos")
    print()
    
    try:
        # Inicializa o runner
        runner = AutomatedTestRunner()
        
        # Executa testes focados em CoV
        results = runner.run_cov_focused_tests()
        
        # Salva resultados espec√≠ficos do CoV
        timestamp = int(time.time())
        cov_results_file = f"experiments/cov_evaluation_{timestamp}.json"
        
        # Prepara dados para serializa√ß√£o
        serializable_results = {}
        for impl in ["original", "cov", "secure"]:
            if impl in results:
                serializable_results[impl] = {}
                for category, test_list in results[impl].items():
                    serializable_results[impl][category] = [
                        {
                            "test_id": t.test_id,
                            "success": t.success,
                            "quality_score": t.quality_score,
                            "execution_time_ms": t.execution_time_ms,
                            "tokens_used": t.tokens_used,
                            "notes": t.notes,
                            "function_called": t.function_called,
                            "validation_passed": t.validation_passed,
                            "category": t.test_category
                        } for t in test_list
                    ]
        
        serializable_results["summary"] = results["summary"]
        serializable_results["cov_analysis"] = results["cov_analysis"]
        serializable_results["evaluation_timestamp"] = timestamp
        serializable_results["test_focus"] = "Chain of Verification Impact Assessment"
        
        with open(cov_results_file, "w", encoding="utf-8") as f:
            json.dump(serializable_results, f, indent=2, ensure_ascii=False)
        
        # Relat√≥rio detalhado
        print("\n" + "="*60)
        print("üìã RELAT√ìRIO DETALHADO DA AVALIA√á√ÉO CoV")
        print("="*60)
        
        cov_analysis = results["cov_analysis"]
        
        print("\nüéØ PERFORMANCE GERAL DO CoV:")
        print(f"   Score combinado de melhoria: {cov_analysis['overall_cov_improvement']:.2f}")
        print(f"   Recomenda√ß√£o: {cov_analysis['recommendation']}")
        
        print("\nüìä AN√ÅLISE POR CATEGORIA:")
        for category, analysis in cov_analysis["category_analysis"].items():
            print(f"\n   üè∑Ô∏è {category}:")
            print(f"      ‚Ä¢ Score combinado: {analysis['combined_score']:.1f}")
            print(f"      ‚Ä¢ Melhoria em success rate: {analysis['success_improvement']:+.1f}%")
            print(f"      ‚Ä¢ Melhoria em qualidade: {analysis['quality_improvement']:+.1f}")
            print(f"      ‚Ä¢ Custo de efici√™ncia: {analysis['efficiency_cost']:.1f}%")
            print(f"      ‚Ä¢ ROI (Return on Investment): {analysis['roi']:.2f}")
        
        print("\nüí° INSIGHTS PRINCIPAIS:")
        for insight in cov_analysis["key_insights"]:
            print(f"   ‚Ä¢ {insight}")
        
        print(f"\nüìÅ Resultados salvos em: {cov_results_file}")
        
        # Estat√≠sticas de teste
        total_tests = sum(
            len(tests) for impl_data in results.values() 
            if isinstance(impl_data, dict) and "test_cases" not in impl_data
            for tests in impl_data.values() if isinstance(tests, list)
        ) // 3  # Divide por 3 porque temos 3 implementa√ß√µes
        
        print("\nüìà ESTAT√çSTICAS:")
        print(f"   ‚Ä¢ Total de casos de teste executados: {total_tests}")
        print("   ‚Ä¢ Implementa√ß√µes comparadas: Original, CoV, Secure")
        print(f"   ‚Ä¢ Categorias avaliadas: {len(cov_analysis['category_analysis'])}")
        
        # Recomenda√ß√µes espec√≠ficas
        print("\nüöÄ PR√ìXIMOS PASSOS RECOMENDADOS:")
        
        if cov_analysis["overall_cov_improvement"] > 5:
            print("   ‚úÖ CoV demonstra benef√≠cios significativos")
            print("   ‚Ä¢ Implemente CoV em produ√ß√£o")
            print("   ‚Ä¢ Monitore performance em casos reais")
            print("   ‚Ä¢ Considere otimiza√ß√µes para reduzir overhead")
        elif cov_analysis["overall_cov_improvement"] > 2:
            print("   ‚ö†Ô∏è CoV demonstra benef√≠cios moderados")
            print("   ‚Ä¢ Use CoV seletivamente para casos complexos")
            print("   ‚Ä¢ Implemente sistema h√≠brido (CoV apenas quando necess√°rio)")
            print("   ‚Ä¢ Continue otimizando a implementa√ß√£o")
        else:
            print("   ‚ùå CoV n√£o demonstra benef√≠cios suficientes")
            print("   ‚Ä¢ Revise a implementa√ß√£o do CoV")
            print("   ‚Ä¢ Analise se os casos de teste s√£o adequados")
            print("   ‚Ä¢ Considere abordagens alternativas")
        
        print("\nüéâ Avalia√ß√£o CoV conclu√≠da com sucesso!")
        
    except FileNotFoundError as e:
        print(f"‚ùå Erro: Arquivo n√£o encontrado - {e}")
        print("üí° Certifique-se de que todos os arquivos de configura√ß√£o est√£o presentes")
        sys.exit(1)
        
    except ValueError as e:
        print(f"‚ùå Erro de configura√ß√£o: {e}")
        print("üí° Configure a vari√°vel OPENAI_API_KEY para executar os testes")
        sys.exit(1)
        
    except Exception as e:
        print(f"‚ùå Erro inesperado: {e}")
        print("üí° Verifique os logs para mais detalhes")
        sys.exit(1)

if __name__ == "__main__":
    main()
